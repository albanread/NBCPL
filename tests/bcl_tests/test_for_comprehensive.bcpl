// Comprehensive test for FOR loop constant optimization
// This demonstrates the difference between optimized (constant bounds)
// and non-optimized (variable bounds) FOR loops

LET test_constant_loops() = VALOF {
    LET sum = 0

    // Test 1: Simple constant bounds - SHOULD BE OPTIMIZED
    // Expected: CMP with immediate #10, ADD with immediate #1
    // No backing variables created for end (10) or step (1)
    FOR i = 1 TO 10 DO {
        sum := sum + i
    }

    // Test 2: Constant with explicit step - SHOULD BE OPTIMIZED
    // Expected: CMP with immediate #20, ADD with immediate #2
    // No backing variables created for end (20) or step (2)
    FOR j = 2 TO 20 BY 2 DO {
        sum := sum + j
    }

    RESULTIS sum
}

LET test_variable_loops() = VALOF {
    LET sum = 0

    // Test 3: Variable end bound - SHOULD NOT BE OPTIMIZED
    // Expected: Creates backing variable for end, uses register-based CMP
    LET max_val = 15
    FOR k = 1 TO max_val DO {
        sum := sum + k
    }

    // Test 4: Variable step - PARTIALLY OPTIMIZED
    // Expected: CMP with immediate #30, but register-based ADD for step
    LET step_val = 3
    FOR m = 3 TO 30 BY step_val DO {
        sum := sum + m
    }

    RESULTIS sum
}

LET test_mixed_loops() = VALOF {
    LET sum = 0

    // Test 5: Both bounds are variables - NO OPTIMIZATION
    // Expected: Both backing variables created, register-based operations
    LET end_val = 12
    LET step_val = 2
    FOR n = 2 TO end_val BY step_val DO {
        sum := sum + n
    }

    RESULTIS sum
}

LET test_nested_constant_loops() = VALOF {
    LET sum = 0

    // Test 6: Nested loops with constants - BOTH SHOULD BE OPTIMIZED
    // This shows significant register pressure reduction
    FOR outer = 1 TO 5 DO {
        FOR inner = 1 TO 3 DO {
            sum := sum + (outer + inner)
        }
    }

    RESULTIS sum
}

LET test_constant_folding() = VALOF {
    LET sum = 0

    // Test 7: Constant expression as bound - SHOULD BE OPTIMIZED IF FOLDING WORKS
    // Expected: (5 + 5) should be folded to 10, then optimized as immediate
    FOR p = 1 TO (5 + 5) DO {
        sum := sum + p
    }

    RESULTIS sum
}

LET START() BE {
    WRITEF("=== FOR Loop Optimization Test Suite ===*N*N")

    WRITEF("Test 1: Constant bounds loops*N")
    LET result1 = test_constant_loops()
    WRITEF("Result (should be 170): %d*N*N", result1)

    WRITEF("Test 2: Variable bounds loops*N")
    LET result2 = test_variable_loops()
    WRITEF("Result (should be 285): %d*N*N", result2)

    WRITEF("Test 3: Mixed variable loops*N")
    LET result3 = test_mixed_loops()
    WRITEF("Result (should be 42): %d*N*N", result3)

    WRITEF("Test 4: Nested constant loops*N")
    LET result4 = test_nested_constant_loops()
    WRITEF("Result (should be 90): %d*N*N", result4)

    WRITEF("Test 5: Constant folding in bounds*N")
    LET result5 = test_constant_folding()
    WRITEF("Result (should be 55): %d*N*N", result5)

    WRITEF("=== Optimization Summary ===*N")
    WRITEF("Tests 1, 4, and 5 should show immediate value usage*N")
    WRITEF("Tests 2 and 3 should show backing variable creation*N")
    WRITEF("Run with --trace-ast to see optimization details*N")
}
