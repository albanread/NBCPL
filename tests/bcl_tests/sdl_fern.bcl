// IFS Barnsley Fern - Fractal generation using SDL and FRND
// This program demonstrates floating point operations by drawing a Barnsley fern
// using an Iterated Function System (IFS) with probabilistic transformations

GET "sdlmanifest.bcl"

// Fern parameters are now defined in sdlmanifest.bcl

// Global variables for fern state
GLOBALS $(
    FLET current_x = 0.0,
    FLET current_y = 0.0,
    LET point_count = 0
$)

// Initialize the fern starting position
LET init_fern() BE $(
    current_x := 0.0
    current_y := 0.0
    point_count := 0
$)

// Apply one iteration of the IFS transformation
// The Barnsley fern uses 4 transformations with different probabilities:
// f1 (1%):  x' = 0,           y' = 0.16*y           (stem)
// f2 (85%): x' = 0.85*x + 0.04*y,  y' = -0.04*x + 0.85*y + 1.6  (main frond)
// f3 (7%):  x' = 0.2*x - 0.26*y,   y' = 0.23*x + 0.22*y + 1.6   (left leaflet)
// f4 (7%):  x' = -0.15*x + 0.28*y, y' = 0.26*x + 0.24*y + 0.44  (right leaflet)

LET iterate_fern() BE $(
    FLET new_x = 0.0
    FLET new_y = 0.0
    FLET random = FRND()  // Get random number between 0.0 and 1.0

    TEST random < 0.01 THEN $(
        // f1: Stem (1% probability)
        new_x := 0.0
        new_y := 0.16 * current_y
    $) ELSE TEST random < 0.86 THEN $(
        // f2: Main frond (85% probability)
        new_x := 0.85 * current_x + 0.04 * current_y
        new_y := -0.04 * current_x + 0.85 * current_y + 1.6
    $) ELSE TEST random < 0.93 THEN $(
        // f3: Left leaflet (7% probability)
        new_x := 0.2 * current_x - 0.26 * current_y
        new_y := 0.23 * current_x + 0.22 * current_y + 1.6
    $) ELSE $(
        // f4: Right leaflet (7% probability)
        new_x := -0.15 * current_x + 0.28 * current_y
        new_y := 0.26 * current_x + 0.24 * current_y + 0.44
    $)

    current_x := new_x
    current_y := new_y
    point_count := point_count + 1
$)

// Convert fern coordinates to screen coordinates
LET fern_to_screen_x(fern_x) = VALOF $(
    FLET scaled_x = fern_x * FERN_SCALE
    LET screen_x = FIX(scaled_x) + FERN_OFFSET_X
    RESULTIS screen_x
$)

LET fern_to_screen_y(fern_y) = VALOF $(
    FLET scaled_y = fern_y * FERN_SCALE
    LET screen_y = FERN_OFFSET_Y - FIX(scaled_y)
    RESULTIS screen_y
$)

// Draw a single point of the fern
LET draw_fern_point(renderer, x, y) BE $(
    LET screen_x = fern_to_screen_x(x)
    LET screen_y = fern_to_screen_y(y)

    // Only draw if point is within window bounds
    IF screen_x >= 0 & screen_x < WINDOW_WIDTH &
       screen_y >= 0 & screen_y < WINDOW_HEIGHT THEN $(
        SDL2_DRAW_POINT(renderer, screen_x, screen_y)
    $)
$)

// Generate and draw multiple points in one cycle
LET draw_fern_cycle(renderer) BE $(
    // Set fern color (bright green)
    SDL2_SET_DRAW_COLOR(renderer, 0, 255, 100, 255)

    FOR i = 1 TO POINTS_PER_CYCLE DO $(
        iterate_fern()

        // Skip the first few iterations to let the system settle
        IF point_count > 10 THEN $(
            draw_fern_point(renderer, current_x, current_y)
        $)
    $)
$)

// Main program
LET START() BE $(
    WRITEF("Barnsley Fern IFS Fractal*N")
    WRITEF("========================*N")
    WRITEF("This program demonstrates floating point operations*N")
    WRITEF("by generating a fractal fern using the FRND function.*N")
    WRITEF("*N")
    WRITEF("Drawing %N points per frame...*N", POINTS_PER_CYCLE)
    WRITEF("Press any key or close window to exit.*N*N")

    // Initialize SDL2
    LET result = SDL2_INIT()
    TEST result = 0 THEN $(
        WRITEF("✅ SDL2 initialized successfully*N")
    $) ELSE $(
        WRITEF("❌ SDL2 initialization failed*N")
        FINISH
    $)

    // Create window
    LET window = SDL2_CREATE_WINDOW_EX("BCPL Barnsley Fern",
                                       SDL2_WINDOWPOS_CENTERED,
                                       SDL2_WINDOWPOS_CENTERED,
                                       WINDOW_WIDTH, WINDOW_HEIGHT,
                                       SDL2_WINDOW_SHOWN)
    TEST window > 0 THEN $(
        WRITEF("✅ Window created successfully*N")

        // Create renderer
        LET renderer = SDL2_CREATE_RENDERER_EX(window, SDL2_RENDERER_ACCELERATED)
        TEST renderer > 0 THEN $(
            WRITEF("✅ Renderer created successfully*N")
            WRITEF("Generating fern... (this may take a moment to become visible)*N")

            // Initialize fern state
            init_fern()

            LET running = TRUE
            LET frame_count = 0

            // Main rendering loop
            WHILE running DO $(
                // Handle events
                LET event_type = SDL2_POLL_EVENT()

                SWITCHON event_type INTO $(
                    CASE SDL2_QUIT:
                        running := FALSE
                        ENDCASE

                    CASE SDL2_KEYDOWN:
                        running := FALSE
                        ENDCASE

                    DEFAULT:
                        // Continue rendering
                        ENDCASE
                $)

                // Don't clear the screen - let points accumulate for better fern visibility
                // Only clear occasionally to prevent too much accumulation
                IF (frame_count REM 1000) = 0 THEN $(
                    // Set background color (dark blue/black)
                    SDL2_SET_DRAW_COLOR(renderer, 10, 15, 25, 255)
                    SDL2_CLEAR(renderer)

                    // Reset fern occasionally for a fresh start
                    IF frame_count > 0 THEN $(
                        WRITEF("Refreshing fern display... (frame %N)*N", frame_count)
                        init_fern()
                    $)
                $)

                // Draw fern points
                draw_fern_cycle(renderer)

                // Present the frame
                SDL2_PRESENT(renderer)

                // Small delay for smooth animation
                SDL2_DELAY(20)  // ~50 FPS

                frame_count := frame_count + 1

                // Progress indicator
                IF (frame_count REM 100) = 0 THEN $(
                    WRITEF("Frame %N, Total points: %N*N", frame_count, point_count)
                $)
            $)

            WRITEF("*N✅ Fern generation completed*N")
            WRITEF("Total frames: %N*N", frame_count)
            WRITEF("Total points plotted: %N*N", point_count)

            // Cleanup
            SDL2_DESTROY_RENDERER(renderer)

        $) ELSE $(
            WRITEF("❌ Failed to create renderer*N")
        $)

        SDL2_DESTROY_WINDOW(window)

    $) ELSE $(
        WRITEF("❌ Failed to create window*N")
    $)

    SDL2_QUIT()
    WRITEF("✅ SDL2 shutdown complete*N")
$)
