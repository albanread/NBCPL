# Makefile for SAMM (Scope Aware Memory Management) Test Suite
# Tests SAMM functionality while maintaining HeapManager API compatibility

CXX = clang++
CXXFLAGS = -std=c++17 -Wall -Wextra -O2 -g
INCLUDES = -I. -I./HeapManager -I./runtime -I./include
LIBS = ./libbcpl_runtime_sdl2_static.a -lpthread

# Target executable
TARGET = test_samm_compatibility

# Source files
MAIN_SRC = test_samm_compatibility.cpp

# HeapManager object files (with SAMM implementation)
HEAP_OBJS = HeapManager/HeapManager.o \
            HeapManager/Heap_allocVec.o \
            HeapManager/Heap_allocString.o \
            HeapManager/Heap_allocObject.o \
            HeapManager/Heap_allocList.o \
            HeapManager/Heap_free.o \
            HeapManager/Heap_printMetrics.o \
            HeapManager/Heap_dumpHeap.o \
            HeapManager/Heap_dumpHeapSignalSafe.o \
            HeapManager/heap_c_wrappers.o \
            HeapManager/heap_manager_globals.o

# Support object files
SUPPORT_OBJS = SignalSafeUtils.o \
               version.o

# All object files
ALL_OBJS = $(TARGET).o $(HEAP_OBJS) $(SUPPORT_OBJS)

# Default target
all: $(TARGET)

# Main executable
$(TARGET): $(ALL_OBJS)
	@echo "Linking SAMM test executable..."
	$(CXX) $(CXXFLAGS) -o $@ $^ $(LIBS)

# Main test source
$(TARGET).o: $(MAIN_SRC)
	@echo "Compiling SAMM test program..."
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

# HeapManager object files
HeapManager/%.o: HeapManager/%.cpp
	@echo "Compiling $<..."
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

# Support object files
%.o: %.cpp
	@echo "Compiling $<..."
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c $< -o $@

# Clean up build artifacts
clean:
	@echo "Cleaning SAMM test build artifacts..."
	rm -f $(TARGET) $(TARGET).o
	rm -f HeapManager/*.o
	rm -f SignalSafeUtils.o version.o

# Force rebuild
rebuild: clean all

# Run the test
test: $(TARGET)
	@echo "Running SAMM compatibility test suite..."
	./$(TARGET)

# Run test with verbose output
test-verbose: $(TARGET)
	@echo "Running SAMM compatibility test suite (verbose)..."
	ENABLE_VERBOSE=1 ./$(TARGET)

# Run test without verbose output
test-quiet: $(TARGET)
	@echo "Running SAMM compatibility test suite (quiet)..."
	ENABLE_VERBOSE=0 ./$(TARGET)

# Check if SAMM is ready for production
check-production: $(TARGET)
	@echo "Checking SAMM production readiness..."
	@if ./$(TARGET) >/dev/null 2>&1; then \
		echo "‚úÖ SAMM is PRODUCTION READY"; \
		echo "‚úÖ All compatibility tests pass"; \
		echo "‚úÖ Scope-based cleanup working"; \
		echo "‚úÖ RETAIN semantics implemented"; \
		echo "‚úÖ Double-free prevention active"; \
	else \
		echo "‚ùå SAMM is NOT production ready"; \
		echo "üîß Some tests are failing"; \
	fi

# Help target
help:
	@echo "SAMM Test Suite Makefile"
	@echo "========================"
	@echo ""
	@echo "Targets:"
	@echo "  all              - Build the SAMM test executable"
	@echo "  test             - Run SAMM compatibility tests"
	@echo "  test-verbose     - Run tests with verbose output"
	@echo "  test-quiet       - Run tests with minimal output"
	@echo "  check-production - Check if SAMM is production ready"
	@echo "  clean            - Remove build artifacts"
	@echo "  rebuild          - Clean and rebuild everything"
	@echo "  help             - Show this help message"
	@echo ""
	@echo "Environment Variables:"
	@echo "  ENABLE_VERBOSE   - Set to 1 for verbose output, 0 for quiet"
	@echo ""
	@echo "Examples:"
	@echo "  make test                    # Run basic tests"
	@echo "  make test-verbose            # Run with detailed output"
	@echo "  ENABLE_VERBOSE=0 make test   # Run quietly"
	@echo "  make check-production        # Verify production readiness"

.PHONY: all clean rebuild test test-verbose test-quiet check-production help
