NewBCPL Compiler Version 1.0.1422
Transforming SUPER calls...
[SuperCallTransformationPass] Starting SUPER call transformation pass
[SuperCallTransformationPass] Visiting Program node
[SuperCallTransformationPass] Entering class: Point
[SuperCallTransformationPass] Entering routine: CREATE
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Entering method: getX
[SuperCallTransformationPass] Entering method: getY
[SuperCallTransformationPass] Entering routine: set
[SuperCallTransformationPass] Entering routine: RELEASE
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Exiting class: Point
[SuperCallTransformationPass] Entering class: ColorPoint
[SuperCallTransformationPass] Entering routine: CREATE
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Found SUPER routine call: CREATE
[SuperCallTransformationPass] Transforming SUPER.CREATE to Point::CREATE
[SuperCallTransformationPass] Successfully transformed SUPER routine call
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Entering routine: setColor
[SuperCallTransformationPass] Entering method: getColor
[SuperCallTransformationPass] Exiting class: ColorPoint
[SuperCallTransformationPass] Entering routine: START
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting FunctionCall
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] Visiting RoutineCallStatement
[SuperCallTransformationPass] SUPER call transformations completed - program modified
SUPER call transformation complete.
Building Control Flow Graphs...
[FIX] Cleared FOR loop state before CFGBuilderPass to prevent corruption
[CFGBuilderPass] build() called.
[CFGBuilderPass] About to accept(Program)
[CFGBuilderPass] visit(Program) called.
[CFGBuilderPass] Processing declaration #0
[CFGBuilderPass] Found ClassDecl at index 0
[CFGBuilderPass] Processing class: Point
[CFGBuilderPass] Found routine method 'CREATE' in class 'Point'
[CFGBuilderPass] Using qualified name for method: Point::CREATE
[CFGBuilderPass] Creating CFG for routine: Point::CREATE
[CFGBuilderPass] Created CFG for routine: Point::CREATE
[CFGBuilderPass] Created new basic block: Point::CREATE_Entry_0
[CFGBuilderPass] Visiting BlockStatement with SAMM scope management.
[SAMM OPTIMIZATION] Skipping scope calls for allocation-free function: Point::CREATE (call tree)
[CFGBuilderPass] Starting optimized block 1 variable tracking
[CFGBuilderPass] Created new basic block: Point::CREATE_Exit_1
[CFGBuilderPass] Resolving 0 GOTO statements...
[CFGBuilderPass] Found function method 'getX' in class 'Point'
[CFGBuilderPass] Using qualified name for method: Point::getX
[CFGBuilderPass] visit(FunctionDeclaration) for function: Point::getX
[CFGBuilderPass] Created CFG for function: Point::getX
[CFGBuilderPass] Created new basic block: Point::getX_Entry_0
[CFGBuilderPass] Visiting BlockStatement with SAMM scope management.
[SAMM OPTIMIZATION] Skipping scope calls for allocation-free function: Point::getX (leaf)
[CFGBuilderPass] Starting optimized block 2 variable tracking
[CFGBuilderPass] SAMM: Visiting ResultisStatement - SAMM disabled, no scope exit call injected.
[CFGBuilderPass] Visiting ResultisStatement - injecting scope cleanup.
[CFGBuilderPass] Created new basic block: Point::getX_Exit_1
[CFGBuilderPass] Resolving 0 GOTO statements...
[CFGBuilderPass] visit(FunctionDeclaration) complete for function: getX
[CFGBuilderPass] Found function method 'getY' in class 'Point'
[CFGBuilderPass] Using qualified name for method: Point::getY
[CFGBuilderPass] visit(FunctionDeclaration) for function: Point::getY
[CFGBuilderPass] Created CFG for function: Point::getY
[CFGBuilderPass] Created new basic block: Point::getY_Entry_0
[CFGBuilderPass] Visiting BlockStatement with SAMM scope management.
[SAMM OPTIMIZATION] Skipping scope calls for allocation-free function: Point::getY (leaf)
[CFGBuilderPass] Starting optimized block 3 variable tracking
[CFGBuilderPass] SAMM: Visiting ResultisStatement - SAMM disabled, no scope exit call injected.
[CFGBuilderPass] Visiting ResultisStatement - injecting scope cleanup.
[CFGBuilderPass] Created new basic block: Point::getY_Exit_1
[CFGBuilderPass] Resolving 0 GOTO statements...
[CFGBuilderPass] visit(FunctionDeclaration) complete for function: getY
[CFGBuilderPass] Found routine method 'set' in class 'Point'
[CFGBuilderPass] Using qualified name for method: Point::set
[CFGBuilderPass] Creating CFG for routine: Point::set
[CFGBuilderPass] Created CFG for routine: Point::set
[CFGBuilderPass] Created new basic block: Point::set_Entry_0
[CFGBuilderPass] Visiting BlockStatement with SAMM scope management.
[SAMM OPTIMIZATION] Skipping scope calls for allocation-free function: Point::set (leaf)
[CFGBuilderPass] Starting optimized block 4 variable tracking
[CFGBuilderPass] Created new basic block: Point::set_Exit_1
[CFGBuilderPass] Resolving 0 GOTO statements...
[CFGBuilderPass] Found routine method 'RELEASE' in class 'Point'
[CFGBuilderPass] Using qualified name for method: Point::RELEASE
[CFGBuilderPass] Creating CFG for routine: Point::RELEASE
[CFGBuilderPass] Created CFG for routine: Point::RELEASE
[CFGBuilderPass] Created new basic block: Point::RELEASE_Entry_0
[CFGBuilderPass] Visiting BlockStatement with SAMM scope management.
[SAMM OPTIMIZATION] Skipping scope calls for allocation-free function: Point::RELEASE (call tree)
[CFGBuilderPass] Starting optimized block 5 variable tracking
[CFGBuilderPass] Created new basic block: Point::RELEASE_Exit_1
[CFGBuilderPass] Resolving 0 GOTO statements...
[CFGBuilderPass] Processing declaration #1
[CFGBuilderPass] Found ClassDecl at index 1
[CFGBuilderPass] Processing class: ColorPoint
[CFGBuilderPass] Found routine method 'CREATE' in class 'ColorPoint'
[CFGBuilderPass] Using qualified name for method: ColorPoint::CREATE
[CFGBuilderPass] Creating CFG for routine: ColorPoint::CREATE
[CFGBuilderPass] Created CFG for routine: ColorPoint::CREATE
[CFGBuilderPass] Created new basic block: ColorPoint::CREATE_Entry_0
[CFGBuilderPass] Visiting BlockStatement with SAMM scope management.
[SAMM OPTIMIZATION] Skipping scope calls for allocation-free function: ColorPoint::CREATE (call tree)
[CFGBuilderPass] Starting optimized block 6 variable tracking
[CFGBuilderPass] Created new basic block: ColorPoint::CREATE_Exit_1
[CFGBuilderPass] Resolving 0 GOTO statements...
[CFGBuilderPass] Found routine method 'setColor' in class 'ColorPoint'
[CFGBuilderPass] Using qualified name for method: ColorPoint::setColor
[CFGBuilderPass] Creating CFG for routine: ColorPoint::setColor
[CFGBuilderPass] Created CFG for routine: ColorPoint::setColor
[CFGBuilderPass] Created new basic block: ColorPoint::setColor_Entry_0
[CFGBuilderPass] Visiting BlockStatement with SAMM scope management.
[SAMM OPTIMIZATION] Skipping scope calls for allocation-free function: ColorPoint::setColor (leaf)
[CFGBuilderPass] Starting optimized block 7 variable tracking
[CFGBuilderPass] Created new basic block: ColorPoint::setColor_Exit_1
[CFGBuilderPass] Resolving 0 GOTO statements...
[CFGBuilderPass] Found function method 'getColor' in class 'ColorPoint'
[CFGBuilderPass] Using qualified name for method: ColorPoint::getColor
[CFGBuilderPass] visit(FunctionDeclaration) for function: ColorPoint::getColor
[CFGBuilderPass] Created CFG for function: ColorPoint::getColor
[CFGBuilderPass] Created new basic block: ColorPoint::getColor_Entry_0
[CFGBuilderPass] Visiting BlockStatement with SAMM scope management.
[SAMM OPTIMIZATION] Skipping scope calls for allocation-free function: ColorPoint::getColor (leaf)
[CFGBuilderPass] Starting optimized block 8 variable tracking
[CFGBuilderPass] SAMM: Visiting ResultisStatement - SAMM disabled, no scope exit call injected.
[CFGBuilderPass] Visiting ResultisStatement - injecting scope cleanup.
[CFGBuilderPass] Created new basic block: ColorPoint::getColor_Exit_1
[CFGBuilderPass] Resolving 0 GOTO statements...
[CFGBuilderPass] visit(FunctionDeclaration) complete for function: getColor
[CFGBuilderPass] Processing declaration #2
[CFGBuilderPass] Found RoutineDecl at index 2
[CFGBuilderPass] Creating CFG for routine: START
[CFGBuilderPass] Created CFG for routine: START
[CFGBuilderPass] Created new basic block: START_Entry_0
[CFGBuilderPass] Visiting BlockStatement with SAMM scope management.
[CFGBuilderPass] SAMM: Injecting HeapManager_enter_scope() call at block start
[CFGBuilderPass] CFGBuilderPass: Registered HeapManager_enter_scope call site at instruction 174 for function 'START'
[CFGBuilderPass] Starting block 9 variable tracking
[CFGBuilderPass] Tracking variable 'p' in current block
[CFGBuilderPass] Tracking variable 'cp' in current block
[CFGBuilderPass] Generating normal block-end cleanup for 2 variables
[CFGBuilderPass] Generating block-end cleanup for: cp
[CFGBuilderPass] Generating block-end cleanup for: p
[CFGBuilderPass] SAMM: Injecting HeapManager_exit_scope() call for normal block exit
[CFGBuilderPass] CFGBuilderPass: Registered HeapManager_exit_scope call site at instruction 175 for function 'START'
[CFGBuilderPass] Created new basic block: START_Exit_1
[CFGBuilderPass] Resolving 0 GOTO statements...
[CFGBuilderPass] visit(Program) complete.
[CFGBuilderPass] Finished accept(Program)
[CFGBuilderPass] build() complete.

[CFGBuilderPass] --- DUMPING ALL CFGs ---
[CFGBuilderPass] CFG found for: START
[CFGBuilderPass] CFG found for: ColorPoint::setColor
[CFGBuilderPass] CFG found for: ColorPoint::CREATE
[CFGBuilderPass] CFG found for: Point::getY
[CFGBuilderPass] CFG found for: Point::RELEASE
[CFGBuilderPass] CFG found for: Point::getX
[CFGBuilderPass] CFG found for: ColorPoint::getColor
[CFGBuilderPass] CFG found for: Point::set
[CFGBuilderPass] CFG found for: Point::CREATE
[CFGBuilderPass] --- END CFG DUMP ---

CFG for function: START
----------------------------------------
Entry Block: START_Entry_0
Exit Block: START_Exit_1 (conceptual)

Block ID: START_Exit_1 (Exit)
  Statements:
    (empty)
  Successors: (none)
  Predecessors: START_Entry_0

Block ID: START_Entry_0 (Entry)
  Statements:
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - AssignmentStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - AssignmentStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
  Successors: START_Exit_1
  Predecessors: (none)
----------------------------------------

CFG for function: ColorPoint::setColor
----------------------------------------
Entry Block: ColorPoint::setColor_Entry_0
Exit Block: ColorPoint::setColor_Exit_1 (conceptual)

Block ID: ColorPoint::setColor_Exit_1 (Exit)
  Statements:
    (empty)
  Successors: (none)
  Predecessors: ColorPoint::setColor_Entry_0

Block ID: ColorPoint::setColor_Entry_0 (Entry)
  Statements:
    - AssignmentStmt
  Successors: ColorPoint::setColor_Exit_1
  Predecessors: (none)
----------------------------------------

CFG for function: ColorPoint::CREATE
----------------------------------------
Entry Block: ColorPoint::CREATE_Entry_0
Exit Block: ColorPoint::CREATE_Exit_1 (conceptual)

Block ID: ColorPoint::CREATE_Exit_1 (Exit)
  Statements:
    (empty)
  Successors: (none)
  Predecessors: ColorPoint::CREATE_Entry_0

Block ID: ColorPoint::CREATE_Entry_0 (Entry)
  Statements:
    - RoutineCallStmt
    - AssignmentStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
  Successors: ColorPoint::CREATE_Exit_1
  Predecessors: (none)
----------------------------------------

CFG for function: Point::getY
----------------------------------------
Entry Block: Point::getY_Entry_0
Exit Block: Point::getY_Exit_1 (conceptual)

Block ID: Point::getY_Exit_1 (Exit)
  Statements:
    (empty)
  Successors: (none)
  Predecessors: Point::getY_Entry_0

Block ID: Point::getY_Entry_0 (Entry)
  Statements:
    - ResultisStmt
  Successors: Point::getY_Exit_1
  Predecessors: (none)
----------------------------------------

CFG for function: Point::RELEASE
----------------------------------------
Entry Block: Point::RELEASE_Entry_0
Exit Block: Point::RELEASE_Exit_1 (conceptual)

Block ID: Point::RELEASE_Exit_1 (Exit)
  Statements:
    (empty)
  Successors: (none)
  Predecessors: Point::RELEASE_Entry_0

Block ID: Point::RELEASE_Entry_0 (Entry)
  Statements:
    - RoutineCallStmt
  Successors: Point::RELEASE_Exit_1
  Predecessors: (none)
----------------------------------------

CFG for function: Point::getX
----------------------------------------
Entry Block: Point::getX_Entry_0
Exit Block: Point::getX_Exit_1 (conceptual)

Block ID: Point::getX_Exit_1 (Exit)
  Statements:
    (empty)
  Successors: (none)
  Predecessors: Point::getX_Entry_0

Block ID: Point::getX_Entry_0 (Entry)
  Statements:
    - ResultisStmt
  Successors: Point::getX_Exit_1
  Predecessors: (none)
----------------------------------------

CFG for function: ColorPoint::getColor
----------------------------------------
Entry Block: ColorPoint::getColor_Entry_0
Exit Block: ColorPoint::getColor_Exit_1 (conceptual)

Block ID: ColorPoint::getColor_Exit_1 (Exit)
  Statements:
    (empty)
  Successors: (none)
  Predecessors: ColorPoint::getColor_Entry_0

Block ID: ColorPoint::getColor_Entry_0 (Entry)
  Statements:
    - ResultisStmt
  Successors: ColorPoint::getColor_Exit_1
  Predecessors: (none)
----------------------------------------

CFG for function: Point::set
----------------------------------------
Entry Block: Point::set_Entry_0
Exit Block: Point::set_Exit_1 (conceptual)

Block ID: Point::set_Exit_1 (Exit)
  Statements:
    (empty)
  Successors: (none)
  Predecessors: Point::set_Entry_0

Block ID: Point::set_Entry_0 (Entry)
  Statements:
    - AssignmentStmt
    - AssignmentStmt
  Successors: Point::set_Exit_1
  Predecessors: (none)
----------------------------------------

CFG for function: Point::CREATE
----------------------------------------
Entry Block: Point::CREATE_Entry_0
Exit Block: Point::CREATE_Exit_1 (conceptual)

Block ID: Point::CREATE_Exit_1 (Exit)
  Statements:
    (empty)
  Successors: (none)
  Predecessors: Point::CREATE_Entry_0

Block ID: Point::CREATE_Entry_0 (Entry)
  Statements:
    - AssignmentStmt
    - AssignmentStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
    - RoutineCallStmt
  Successors: Point::CREATE_Exit_1
  Predecessors: (none)
----------------------------------------
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X15 arg1=X13 arg2=X12 
[COERCE_DEBUG] Integer: X15 -> X0
[COERCE_DEBUG] Integer: X13 -> X1
[COERCE_DEBUG] Integer: X12 -> X2
[COERCE_DEBUG] Executed 3 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: 
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X0 
[COERCE_DEBUG] Integer: X0 -> X0
[COERCE_DEBUG] Executed 0 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: arg0=X9 
[COERCE_DEBUG] Integer: X9 -> X0
[COERCE_DEBUG] Executed 1 queued operations
[COERCE_DEBUG] Input argument registers: 
[COERCE_DEBUG] Executed 0 queued operations
Testing class member variable access with correct offsets
=================================================

1. Basic Point class test:
Point created at (50, 75)
Reading values: x=50, y=75
Setting new values...
Reading new values: x=100, y=200

2. Inherited ColorPoint class test:
Point created at (130, 140)
Fatal Signal (SIGSEGV) caught.

--- Processor Flags (CPSR) ---
Value: 0x0000000020000000
Flags: N=0 Z=0 C=1 V=0
|----------------------------|
Register dump (Apple ARM64):
| X0   | 0x0000000000000000 |
| X1   | 0x0000000000000000 |
| X2   | 0x00000000000120a8 |
| X3   | 0x000000011f810a03 |
| X4   | 0x0000000000000000 |
| X5   | 0x00000001062cbe10 |
| X6   | 0x0000000000000030 |
| X7   | 0x0000000000000007 |
| X8   | 0x00000001f7e7616c |
| X9   | 0x00000001f7e80748 |
| X10   | 0x0000000000000002 |
| X11   | 0x0000010000000000 |
| X12   | 0x00000000fffffffd |
| X13   | 0x0000000000000000 |
| X14   | 0x0000000000000000 |
| X15   | 0x0000000000000000 |
| X16   | 0x0000000189ea25fc |
| X17   | 0x00000001f8ecd428 |
| X18   | 0x0000000000000000 |
| X19   | 0x000000016d155450 |
| X20   | 0x0000000000000082 |
| X21   | 0x000000000000008c |
| X22   | 0x00000000000000ff |
| X23   | 0x00000001f7bf8018 |
| X24   | 0x00000001f7bf8150 |
| X25   | 0x000000016d1576b0 |
| X26   | 0x0000000000000000 |
| X27   | 0x0000600000b58a40 |
|----------------------------|
| DP    | 0x00000001039cc000 |
| FP    | 0x00000001062cbea0 |
| LR    | 0x0000000103acc248 |
| SP    | 0x00000001062cbe40 |
| PC    | 0x0000000103acc248 |
|----------------------------|
Floating-point register dump (Apple ARM64):
| Reg   | Hex Value (64-bit)     |
|-------+------------------------|
| D0   | 0x0000000000000000 |
| D1   | 0x0000000040000000 |
| D2   | 0x000000003f800000 |
| D3   | 0x0706050403020100 |
| D4   | 0x0000000000000010 |
| D5   | 0x81efbbe1923d20d2 |
| D6   | 0xa9f69a05ae709eca |
| D7   | 0x14d9518b299a4e92 |
| D8   | 0x0000000000000000 |
| D9   | 0x0000000000000000 |
| D10   | 0x0000000000000000 |
| D11   | 0x0000000000000000 |
| D12   | 0x0000000000000000 |
|----------------------------|

--- Heap Allocation Report (Signal Handler) ---
NOTE: Heap tracing was not enabled. No heap data to dump.
---------------------------------------------

--- Source Code ---
//LINE 1 "/Users/oberon/projects/NewBCPL/tests/bcl_tests/class1.bcl"
// class1.bcl - Test for class member variable access

CLASS Point $(

    DECL x, y

    // Constructor
    ROUTINE CREATE(initialX, initialY) BE $(
        x := initialX
        y := initialY

        WRITES("Point created at (")
        WRITEN(x)
        WRITES(", ")
        WRITEN(y)
        WRITES(")*N")
    $)

    // Accessor methods
    FUNCTION getX() = VALOF $(
        RESULTIS x
    $)

    FUNCTION getY() = VALOF $(
        RESULTIS y
    $)

    // Setter method
    ROUTINE set(newX, newY) BE $(
        x := newX
        y := newY
        //WRITES("Point moved to (")
        //WRITEN(x)
        //WRITES(", ")
        //WRITEN(y)
        //WRITES(")*N")
    $)

    // Destructor (optional but good practice)
    ROUTINE RELEASE() BE $(
        WRITES("Point destroyed*N")
    $)
$)

// Test class inheritance and member variable offsets
CLASS ColorPoint EXTENDS Point $(

    DECL color

    // Override constructor to include color
    ROUTINE CREATE(initialX, initialY, initialColor) BE $(

        SUPER.CREATE(initialX, initialY)
        color := initialColor

        WRITES("ColorPoint created at (")
        WRITEN(x)
        WRITES(", ")
        WRITEN(y)
        WRITES(") with color ")
        WRITEN(color)
        WRITES("*N")
    $)

    ROUTINE setColor( c ) BE $(
        SELF.color := c
    $)

    // Color accessor
    FUNCTION getColor() = VALOF $(
        RESULTIS color
    $)



$)



LET START() BE $(
    WRITES("Testing class member variable access with correct offsets*N")
    WRITES("=================================================*N*N")

    // Test basic Point class
    WRITES("1. Basic Point class test:*N")
    LET p = NEW Point
    p.CREATE(50, 75)

    WRITES("Reading values: x=")
    WRITEN(p.getX())
    WRITES(", y=")
    WRITEN(p.getY())
    WRITES("*N")

    WRITES("Setting new values...*N")
    p.set(100, 200)

    WRITES("Reading new values: x=")
    WRITEN(p.getX())
    WRITES(", y=")
    WRITEN(p.getY())
    WRITES("*N*N")

    // Test inheritance with ColorPoint
    WRITES("2. Inherited ColorPoint class test:*N")
    LET cp = NEW ColorPoint
    cp.CREATE(130, 140, 255)

    WRITES("Reading values: x=")
    WRITEN(cp.getX())
    WRITES(", y=")
    WRITEN(cp.getY())
    WRITES(", color=")
    WRITEN(cp.getColor())
    WRITES("*N")

    WRITES("Setting new values...*N")
    cp.set(60, 80)  // Note: using inherited set() method
    cp.setColor(123)
    WRITES("Reading new values: x=")
    WRITEN(cp.getX())
    WRITES(", y=")
    WRITEN(cp.getY())
    WRITES(", color=")
    WRITEN(cp.getColor())
    WRITES("*N")

    WRITES("*NTest completed successfully*N")
$)

-------------------


--- Processor Flags (CPSR) ---
Value: 0x0000000020000000
Flags: N=0 Z=0 C=1 V=0
|----------------------------|
Register dump (Apple ARM64):
| X0   | 0x0000000000000000 |
| X1   | 0x0000000000000000 |
| X2   | 0x00000000000120a8 |
| X3   | 0x000000011f810a03 |
| X4   | 0x0000000000000000 |
| X5   | 0x00000001062cbe10 |
| X6   | 0x0000000000000030 |
| X7   | 0x0000000000000007 |
| X8   | 0x00000001f7e7616c |
| X9   | 0x00000001f7e80748 |
| X10   | 0x0000000000000002 |
| X11   | 0x0000010000000000 |
| X12   | 0x00000000fffffffd |
| X13   | 0x0000000000000000 |
| X14   | 0x0000000000000000 |
| X15   | 0x0000000000000000 |
| X16   | 0x0000000189ea25fc |
| X17   | 0x00000001f8ecd428 |
| X18   | 0x0000000000000000 |
| X19   | 0x000000016d155450 |
| X20   | 0x0000000000000082 |
| X21   | 0x000000000000008c |
| X22   | 0x00000000000000ff |
| X23   | 0x00000001f7bf8018 |
| X24   | 0x00000001f7bf8150 |
| X25   | 0x000000016d1576b0 |
| X26   | 0x0000000000000000 |
| X27   | 0x0000600000b58a40 |
|----------------------------|
| DP    | 0x00000001039cc000 |
| FP    | 0x00000001062cbea0 |
| LR    | 0x0000000103acc248 |
| SP    | 0x00000001062cbe40 |
| PC    | 0x0000000103acc248 |
|----------------------------|
Floating-point register dump (Apple ARM64):
  [Floating-point register state not available in this context.]
|----------------------------|

--- Heap Allocation Report (Signal Handler) ---
NOTE: Heap tracing was not enabled. No heap data to dump.
---------------------------------------------

--- Recent Runtime Errors ---
DEBUG: error_index=0x0000000000000000 start_idx=0x0000000000000000
---------------------------
Stack trace:
  0   NewBCPL                             0x0000000102f3b954 _ZN13SignalHandler20fatal_signal_handlerEiP9__siginfoPv + 2812
  1   libsystem_platform.dylib            0x0000000189f1d6a4 _sigtramp + 56
  2   ???                                 0x0000000103acc248 0x0 + 4356620872
  3   ???                                 0x0000000103acc518 0x0 + 4356621592
  4   NewBCPL                             0x0000000102e42cb0 _ZN11JITExecutor7executeEPFxvE + 92
  5   NewBCPL                             0x0000000102e788b4 _Z20handle_jit_executionPvRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbb + 356
  6   NewBCPL                             0x0000000102e75104 main + 15104
  7   dyld                                0x0000000189b42b98 start + 6076
